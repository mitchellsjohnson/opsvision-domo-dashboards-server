AWSTemplateFormatVersion: "2010-09-09"
Description: "Template to create the pipeline to deploy test lambda"
Parameters:
  CFNStackName:
    Description: Go lambda deployment pipeline stack
    Type: String
    Default: opsvision-domo-dashboard
  Env:
    Description: 'The env level to which this stack is being deployed (i.e. Dev/Prod)'
    Type: 'String'
    Default: PersonalDev
    AllowedValues:
      - PersonalDev
      - Prod
  ArtifactName:
    Description: Name of artifact to be consumed
    Type: String
    Default: packaged-template.yaml
  GitHubRepo:
    Type: String
    AllowedPattern: "[A-Za-z0-9-]+"
    Default: "opsvision-domo-dashboards-server"
  GithubOwner:
    Type: String
    Default: "team-opsvision"
  GitHubBranch:
    Type: String
    Default: main 
    AllowedPattern: "[A-Za-z0-9-]+"
  CodepipelineSNSTopicArn:
    Description: SNS Topic Arn to alert when codepipeline fails running.
    Type: String
  CodeStarConnectionArn:
    Description: Codestar connection arn to pull repo
    Type: String
  RetainedResources:
    Description: Are there retained resources in this project?
    Type: String
    Default: false
    AllowedValues:
      - false
      - true
  CodeBuildImage:
    Description: The image tag that identifies the Docker image to use for this build project
    Type: String
    Default: "aws/codebuild/standard:5.0"
  BuildspecFilename:
    Description: The build specification filename for the project
    Type: String
    Default: buildspec.yml  
  CodeBuildInstanceSize:
    Description: Instance size types. Small = 2cpu/3GB. Medium = 4cpu/7gb. Large =
      8cpu/15gb.
    Type: String
    AllowedValues:
      - Small
      - Medium
      - Large
    Default: Small

Conditions:
  RetainedResources: !Equals [ !Ref RetainedResources, true]
Mappings:
  CodeBuild:
    BuildSize:
      Small: BUILD_GENERAL1_SMALL
      Medium: BUILD_GENERAL1_MEDIUM
      Large: BUILD_GENERAL1_LARGE  
Resources:
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${CFNStackName}-CodeBuildPipeline"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Sid: ''
            Principal:
              Service: 'codebuild.amazonaws.com'
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildServiceRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource:
                  - !Ref CodeStarConnectionArn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*:* 

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${CFNStackName}-DeploymentPipeline"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
                - codebuild.amazonaws.com
                - cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelineServiceRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codepipeline:DeletePipeline
                  - codepipeline:UpdatePipeline
                Resource: !Sub "arn:aws:codepipeline:*:*:${CFNStackName}*"
              - Effect: Allow
                Action:
                  - iam:GetRolePolicy
                  - iam:PutRolePolicy
                  - iam:GetRole
                  - iam:PassRole
                  - iam:UpdateAssumeRolePolicy
                Resource:
                  - !Sub "arn:aws:iam::${AWS::AccountId}:role/${CFNStackName}-cloudformation-role"
              - Effect: Allow
                Action:
                  - codebuild:*
                Resource: 
                  - !GetAtt CodeBuild.Arn
              - Effect: Allow
                Action:
                  - cloudformation:DescribeChangeSet
                  - cloudformation:CreateChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeStacks
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                Resource:
                  - !Sub "arn:aws:cloudformation:us-east-1:*:stack/${CFNStackName}*"
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DeleteAlarms
                Resource: !Sub "arn:aws:cloudwatch:*:${AWS::AccountId}:alarm:${CFNStackName}-*"
              - Effect: Allow
                Action:
                  - s3:PutObject*
                  - s3:GetObject
                Resource: !Sub  ${ArtifactBucket.Arn}/*
              - Effect: Allow
                Action:
                  - s3:DeleteBucket
                Resource: !GetAtt ArtifactBucket.Arn
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref 'CodepipelineSNSTopicArn'
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                  - codestar-connections:PassedToService
                Resource: !Ref 'CodeStarConnectionArn'
  
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ArtifactBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref ArtifactBucket
      PolicyDocument:
        Statement:
          - Action:
              - 's3:*'
            Effect: Deny
            Resource: !Sub "${ArtifactBucket.Arn}/*"
            Principal: '*'
            Condition:
              Bool: 
                "aws:SecureTransport": "false"
          - Action:
              - 's3:Get*'
              - 's3:Put*'
            Effect: Allow
            Resource: !Sub "${ArtifactBucket.Arn}/*"
            Principal:
              AWS: !GetAtt CodeBuildServiceRole.Arn
          - Action:
              - 's3:ListBucket'
            Effect: Allow
            Resource: !GetAtt ArtifactBucket.Arn
            Principal:
              AWS: '*'
            Condition:
              StringLike:
                'aws:PrincipalArn':
                  - !GetAtt CodeBuildServiceRole.Arn

  CodeBuild:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Source:
        Type: "CODEPIPELINE"
        BuildSpec: !Ref BuildspecFilename
      Artifacts:
        OverrideArtifactName: false
        Type: "CODEPIPELINE"
      Environment:
        ComputeType: !FindInMap
          - CodeBuild
          - BuildSize
          - !Ref 'CodeBuildInstanceSize'
        Image: !Ref CodeBuildImage
        PrivilegedMode: true
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: PACKAGE_BUCKET
            Value: !Ref ArtifactBucket
      ServiceRole: !Ref CodeBuildServiceRole
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 480
      LogsConfig:
        CloudWatchLogs:
          Status: "ENABLED"
        S3Logs:
          Status: "DISABLED"

  CodePipelinePersonal:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Location: !Ref ArtifactBucket
        Type: "S3"
      Stages:
        - Actions:
            - InputArtifacts: []
              ActionTypeId:
                Version: '1'
                Owner: AWS
                Category: Source
                Provider: CodeStarSourceConnection
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1
              Configuration:
                ConnectionArn: !Ref 'CodeStarConnectionArn'
                FullRepositoryId: !Sub "${GithubOwner}/${GitHubRepo}"
                BranchName: !Ref GitHubBranch
                OutputArtifactFormat: "CODE_ZIP"
              Name: ApplicationSource
          Name: "Source"
        - Actions:
            - ActionTypeId:
                Category: "Build"
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: "1"
              Configuration:
                ProjectName: !Ref CodeBuild
                EnvironmentVariables: '[{"name": "EXECUTION_ID", "value": "#{codepipeline.PipelineExecutionId}"}]'
              InputArtifacts:
                - Name: 'SourceArtifact'
              Name: "Build"
              OutputArtifacts:
                - Name: 'BuildArtifact'
              Region: !Sub ${AWS::Region}
              RunOrder: 1
          Name: "Build"
        - Actions:
            - ActionTypeId:
                Category: "Deploy"
                Owner: "AWS"
                Provider: "CloudFormation"
                Version: "1"
              Configuration:
                ActionMode: "CREATE_UPDATE"
                Capabilities: "CAPABILITY_AUTO_EXPAND,CAPABILITY_NAMED_IAM,CAPABILITY_IAM"
                RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${CFNStackName}-cloudformation-role"
                StackName: !Sub ${CFNStackName}-cloudformation
                TemplatePath: BuildArtifact::cloudformation_template.yaml
                ParameterOverrides: 
                  Fn::Sub:
                        - '{"BuildArtifactBucket": "${ArtifactBucket}"}'
                        -  ArtifactBucket: !GetAtt ArtifactBucket.Arn
              Name: "CloudFormation-step"
              Region: !Sub ${AWS::Region}
              InputArtifacts:
                - Name: 'BuildArtifact'
              RunOrder: 1
              Namespace: DeployCloudFormationRolesVariables
          Name: "DeployCloudFormationRole"
        - Fn::If:
          - RetainedResources 
          - Actions:
              - ActionTypeId:
                  Category: "Deploy"
                  Owner: "AWS"
                  Provider: "CloudFormation"
                  Version: "1"
                Configuration:
                  ActionMode: "CREATE_UPDATE"
                  Capabilities: "CAPABILITY_AUTO_EXPAND,CAPABILITY_NAMED_IAM,CAPABILITY_IAM"
                  RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${CFNStackName}-cloudformation-role"
                  StackName: !Sub ${CFNStackName}-retained
                  TemplatePath: BuildArtifact::retained-packaged-template.yaml
                  ParameterOverrides:
                      Fn::Sub:
                        - '{"CFNStackName": "${CFNStackName}"}'
                        - CFNStackName: !Ref CFNStackName
                Name: "CloudFormation-step"
                Region: !Sub ${AWS::Region}
                InputArtifacts:
                  - Name: 'BuildArtifact'
                RunOrder: 1
                Namespace: DeployRetainedResourcesVariables
            Name: "DeployRetainedResources"
          - !Ref AWS::NoValue
        - Actions:
            - ActionTypeId:
                Category: "Deploy"
                Owner: "AWS"
                Provider: "CloudFormation"
                Version: "1"
              Configuration:
                ActionMode: "CREATE_UPDATE"
                Capabilities: "CAPABILITY_AUTO_EXPAND,CAPABILITY_NAMED_IAM,CAPABILITY_IAM"
                RoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/${CFNStackName}-cloudformation-role"
                StackName: !Ref CFNStackName
                TemplatePath: !Sub "BuildArtifact::${ArtifactName}"
                TemplateConfiguration: BuildArtifact::CFTemplateConfig.json
                ParameterOverrides: 
                  Fn::Sub:
                        - '{"Env": "${Env}"}'
                        -  Env: !Ref Env
              Name: "CloudFormation-step"
              Region: !Sub ${AWS::Region}
              InputArtifacts:
                - Name: BuildArtifact
              RunOrder: 1
              Namespace: DeployVariables
          Name: "DeployMainResources" 

  CodePipelineFailureNotification:
    Type: 'AWS::CodeStarNotifications::NotificationRule'
    Properties:
      Name: !Sub "Notification for failed ${CFNStackName} pipeline run"
      DetailType: FULL
      Resource: !Sub "arn:aws:codepipeline:us-east-1:${AWS::AccountId}:${CodePipelinePersonal}"
      EventTypeIds: 
        - codepipeline-pipeline-pipeline-execution-failed
      Targets: 
          - TargetType: SNS 
            TargetAddress: !Ref CodepipelineSNSTopicArn
